=-==================================================================SeqList.c================================================================================================
=-==================================================================SeqList.c================================================================================================
=-==================================================================SeqList.c================================================================================================

#define _CRT_SECURE_NO_WARNINGS 1
#include"SeqList.h"


void Chick(SeqList* ps)//妙啊
{
	assert(ps);
	if (ps->size == ps->capacity)
	{
		size_t newcapacity = ps->capacity == 0 ? 4: ps->capacity * 2;//***此三目(也是一种if判断表达式) 解决第一次chick容量为0 初始4 之后翻倍的问题
		ps->a = (SLDateType*)realloc(ps->a,newcapacity * sizeof(SLDateType));
		ps->capacity = newcapacity;
	}
}


void SeqListInit(SeqList* ps)
{
	assert(ps);
	ps->a = NULL;
	ps->size = ps->capacity = 0;
}


void SeqListDestory(SeqList* ps)
{
	assert(ps);
	free(ps->a);
	ps->a = NULL;
	ps->size = ps->capacity = 0;
}


void SeqListPrint(SeqList* ps)
{
	assert(ps);
	size_t i = 0;
	for (i = 0; i <ps->size; i++)
	{
		printf("%d ",ps->a[i]);
	}
	printf("%\n");
}


void SeqListPushBack(SeqList* ps, SLDateType x)//尾插 可复用任意插
{
	
	Chick(ps);
	ps->a[ps->size] = x;
	ps->size++;
}
void SeqListPushFront(SeqList* ps, SLDateType x)//头插 可复用任意插
{
	assert(ps);
	Chick(ps);
	int i;
	for (i = ps->size; i >= 1; i--)
	{
		ps->a[i] = ps->a[i-1];
	}
	ps->a[0] = x;
	ps->size++;
}


void SeqListPopFront(SeqList* ps)
{
	assert(ps);
	int i;
	for (i = 0; i < ps->size-1; i++)
	{
		ps->a[i] = ps->a[i+1];
	}
	ps->size--;
}


void SeqListPopBack(SeqList* ps)
{
	ps->size--;
}


int SeqListFind(SeqList* ps, SLDateType x)
{
	assert(ps);
	//暴力
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (x == ps->a[i]) return i;
	}
	return -1;//找不着(下标不可能为负)
	//快排 二分？
}


void SeqListInsert(SeqList* ps, size_t pos, SLDateType x)
{
	assert(ps);
	//这个位置 因为是顺序表 所以有限
	assert(pos <= ps->size);
	Chick(ps);
	int i;
	for (i = ps->size; i >pos; i--)
	{
		ps->a[i] = ps->a[i - 1];
	}
	ps->a[pos] = x;
	ps->size++;
}
void SeqListErase(SeqList* ps, size_t pos)
{
	assert(ps);
	assert(pos <= ps->size - 1); 
	int start = pos;
	while (start<ps->size-1)
	{
		ps->a[start] = ps->a[start + 1];
		start++;
	}
	ps->size--;
}
