===========================================================================Stack.h===============================================================================================
===========================================================================Stack.h===============================================================================================
===========================================================================Stack.h===============================================================================================
#pragma once
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>


// 支持动态增长的栈
typedef int STDataType;
typedef struct Stack
{
	STDataType* a;
	int top;		// 栈顶
	int capacity;  // 容量 
}Stack;
// 初始化栈 
void StackInit(Stack* ps);
// 入栈 
void StackPush(Stack* ps, STDataType data);
// 出栈 
void StackPop(Stack* ps);
// 获取栈顶元素 
STDataType StackTop(Stack* ps);
// 获取栈中有效元素个数 
int StackSize(Stack* ps);
// 检测栈是否为空，如果为空返回非零结果，如果不为空返回0 
int StackEmpty(Stack* ps);
// 销毁栈 
void StackDestroy(Stack* ps);



===========================================================================Stack.c===============================================================================================
===========================================================================Stack.c===============================================================================================
===========================================================================Stack.c===============================================================================================

#include"Stack.h"
//top 为 0 时    栈代表空
void ChickStack(Stack* ps)
{
	if (ps->capacity == ps->top)
	{
		Stack* tmp = (STDataType*)realloc(ps->a, ps->capacity * 2 * sizeof(STDataType));
		assert(tmp);
		ps->a = tmp;
		ps->capacity *= 2;
	}
}

void StackInit(Stack* ps)
{
	ps->a = (STDataType*)malloc(sizeof(STDataType)*4);
	ps->capacity = 4;
	ps->top = 0;
}

// 入栈 
void StackPush(Stack* ps, STDataType data)
{
	assert(ps);
	ChickStack(ps);
	ps->a[ps->top] = data;
	ps->top++;
}
// 出栈 
void StackPop(Stack* ps)
{
	assert(ps);
	if(ps->top>0) ps->top--;
	
}

// 获取栈顶元素 
STDataType StackTop(Stack* ps)
{
	assert(ps);
	assert(ps->top>0);
	return ps->a[ps->top - 1];
	
}
int StackSize(Stack* ps)
{
	assert(ps);
	return ps->top;
}
int StackEmpty(Stack* ps)//1 真 0 假
{
	assert(ps);
	return ps->top==0;
}

void StackDestroy(Stack* ps)
{
	assert(ps);
	ps->top = 0;
	free(ps->a);
	ps->a = NULL;
	ps->capacity = 0;
}
===========================================================================test.c===============================================================================================
===========================================================================test.c===============================================================================================
===========================================================================test.c===============================================================================================
#include"Stack.h"


int main()
{
	Stack st;	
	StackInit(&st);
	StackPush(&st,1);
	StackPush(&st, 2);
	StackPush(&st, 3);
	StackPush(&st, 4);
	StackPush(&st, 1);
	StackPush(&st, 2);
	StackPush(&st, 3);
	StackPush(&st, 4);
	while (!StackEmpty(&st))
	{
		printf("%d ", StackTop(&st));
		StackPop(&st);
	
	}
	printf("\n");
	return 0;
}
