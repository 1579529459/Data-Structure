#pragma once
#include<iostream>
#include <vector>
using namespace std;
namespace OpenHash
{
	
	template<class T>
	class HashFunc
	{
	public:
		size_t operator()(const T& val)
		{
			return val;
		}
	};

	template<>
	class HashFunc<string>
	{
	public:
		size_t operator()(const string& s)
		{
			const char* str = s.c_str();
			unsigned int seed = 131; // 31 131 1313 13131 131313
			unsigned int hash = 0;
			while (*str)
			{
				hash = hash * seed + (*str++);
			}

			return hash;
		}
	};

	template<class V>
	struct HashBucketNode
	{
		HashBucketNode(const V& data)
			: _pNext(nullptr), _data(data)
		{}
		HashBucketNode<V>* _pNext;
		V _data;
	};

	// 本文所实现的哈希桶中key是唯一的
	template<class V, class HF = HashFunc<V>>
	class HashBucket
	{
		typedef HashBucketNode<V> Node;
		typedef Node* PNode;

		typedef HashBucket<V, HF> Self;

	public:
		HashBucket(size_t capacity = 5)
			: _table(capacity*2)
			, _size(0)
		{}

		~HashBucket()
		{
			Clear();	
		}

		// 哈希桶中的元素不能重复
		Node* Insert(const V& data)
		{
			//扩容;
			CheckCapacity();
			//找该链中存在data吗
			int index = HashFunc(data);
			Node* cur = _table[index];
			while (cur)
			{
				if (cur->_data == data) return nullptr;
				cur = cur->_pNext;
			}
			//插入(头插);
			Node* newnode = new HashBucketNode<V>(data);
			newnode->_pNext = _table[index];
			_table[index] = newnode;
			++_size;
			return newnode;
		}

		// 删除哈希桶中为data的元素(data不会重复)
		bool Erase(const V& data)
		{
			int index = HashFunc(data);
			Node* cur = _table[index];
			Node* prev = cur;
		
			//删第一个特殊情况;
			
			while (cur)
			{
				if (cur->_data == data)
				{
					//删除
					if (cur == _table[index])
					{
						_table[index] = cur->_pNext;
					}
					else
					{
						prev->_pNext = cur->_pNext;
					}
					delete cur;
					cur == nullptr;
					--_size;
					return true;
				}
				prev = cur;
				cur = cur->_pNext;
			}
			return false;

		}

		Node* Find(const V& data)
		{
			int index = HashFunc(data);
			Node* cur = _table[index];
			while (cur)
			{
				if (cur->_data == data)
				{
					return cur;
				}
			}
			return nullptr;
		}

		size_t Size()const
		{
			return _size;
		}

		bool Empty()const
		{
			return 0 == _size;
		}
		void Clear()
		{
			for (size_t i = 0; i < _table.capacity(); ++i)
			{
				Node* pCur = _table[i];

				// 删除i号桶所对应链表中的所有节点
				while (pCur)
				{
					// 采用头删
					_table[i] = pCur->_pNext;
					delete pCur;
					pCur = _table[i];
				}
			}

			_size = 0;
		}
		size_t BucketCount()const
		{
			return _table.size();
		}

		void Swap(Self& ht)
		{
			_table.swap(ht._table);
			swap(_size, ht._size);
		}

	private:
		size_t HashFunc(const V& data)
		{
			return HF()(data) % _table.size();
		}

		void CheckCapacity()
		{

			if (10*(_size/_table.capacity())>=7)
			{
				Self newht(_size);
				//复用insert 所有元素 挪到新表;
				for (auto& e : _table)
				{
					Node* cur = e;
					while (cur)
					{
						newht.Insert(cur->_data);
						cur = cur->_pNext;
					}
				}
				Swap(newht);
			}
		}

	private:
		vector<Node*> _table;
		size_t _size;      // 哈希表中有效元素的个数
	};
}	
