#include<iostream>
#include<map>
#include<set>
#include<algorithm>
#include<vector>
using namespace std;

template<class T>
struct AVLTreeNode
{
	AVLTreeNode(const T& data = T())
		: _left(nullptr)
		, _right(nullptr)
		, _parent(nullptr)
		, _data(data)
		, _bf(0)
	{}

	AVLTreeNode<T>* _left;
	AVLTreeNode<T>* _right;
	AVLTreeNode<T>* _parent;
	T _data;
	int _bf;   // 节点的平衡因子
};


// AVL: 二叉搜索树 + 平衡因子的限制
template<class T>
class AVLTree
{
	typedef AVLTreeNode<T> Node;
public:
	AVLTree()
		: _root(nullptr)
	{}

	// 在AVL树中插入值为data的节点
	bool Insert(const T& data)
	{
		Node* newnode = new Node(data);
		if (_root == nullptr)
		{
			_root = newnode;
			return true;
		}

		//找;
		Node* cur = _root;
		Node* parent = cur;
		
		while (cur!=nullptr)
		{
			if (cur->_data > data)
			{
				parent = cur;
				cur = cur->_left;
			}
			else if (cur->_data < data)
			{
				parent = cur;
				cur = cur->_right;
			}
			
			else
			{
				//不许有重复;
				delete newnode;
				return false;
			}
		}
		//找到位置了;
		if (parent->_data<data)
		{
			parent->_right = newnode;
		}
		else
		{
			parent->_left = newnode;
		}
		newnode->_parent = parent;//“三叉链”

		//这里只是插完了;
		
		//更新平衡因子 
		cur = newnode;
		while (parent)
		{
			if (parent->_left == cur)
				parent->_bf--;
			else
				parent->_bf++;
			//（说明改变前是0）继续向上更新;
			if (parent->_bf == 1 || parent->_bf == -1)
			{
				cur = parent;
				parent = parent->_parent;
			}
			else if (parent->_bf == 0)
				break;
			//说明-- or ++后不是1 or -1 or0,则为 2 or -2 要旋转; 
			else
			{
				if (parent->_bf == -2 && cur->_bf == -1)
					RotateR(parent);
				else if (parent->_bf == -2 && cur->_bf == 1)
					RotateLR(parent);
				else if (parent->_bf == 2 && cur->_bf == 1)
					RotateL(parent);
				else
					RotateRL(parent);
				//插入的过程中都是avl
				//一旦不是 旋转完以后改子树就会是 不影响上面所以转完break
				break;
			}
			
		}
		
		return true;
	}

	// AVL树的验证
	bool IsAVLTree()
	{
		return _IsAVLTree(_root);
	}
	void Inorder()
	{
		return _InOrder(_root);
	}
private:
	// 根据AVL树的概念验证pRoot是否为有效的AVL树
	size_t _Height(Node* pRoot)
	{
		if (pRoot == nullptr)
			return 0;
		int left = _Height(pRoot->_left);
		int right = _Height(pRoot->_right);
		return 1+(left > right ? left : right);
	}
	bool _IsAVLTree(Node* root)
	{
		if (nullptr == root)
			return true;

		int leftHeight = _Height(root->_left);
		int rightHeight = _Height(root->_right);

		if (abs(rightHeight - leftHeight) > 1 ||
			rightHeight - leftHeight != root->_bf)
			return false;

		return _IsAVLTree(root->_left) && _IsAVLTree(root->_right);
	}
	
	// 右单旋
	void RotateR(Node* parent)
	{
		Node* pparent = parent->_parent;
		Node* cur = parent->_left;
		parent->_left = cur->_right;
		if (cur->_right)
			cur->_right->_parent = parent;
		cur->_right = parent;
		parent->_parent = cur;
		cur->_parent = pparent;
		if (pparent == nullptr)
			_root = cur;
		else
		{
			
			if (pparent->_right == parent)
				pparent->_right = cur;
			else
				pparent->_left = cur;
		}
		//平衡因子
		cur->_bf = 0;
		parent->_bf = 0;
	}
	// 左单旋
	void RotateL(Node* parent)
	{
		Node* pparent = parent->_parent;
		Node* cur = parent->_right;
		parent->_right = cur->_left;
		if (cur->_left)
			cur->_left->_parent = pparent;
		cur->_left = parent;
		parent->_parent = cur;
		cur->_parent = pparent;
		if (pparent==nullptr)
			_root = cur;
		else
		{
			if (pparent->_right == parent)
				pparent->_right = cur;
			else
				pparent->_left = cur;
		}
		cur->_bf = parent->_bf = 0;
	}
	//双旋就是复合单旋 注意 _bf需要特殊处理;
	// 右左双旋
	void RotateRL(Node* parent)
	{
		//修正平衡因子的时候注意也有特殊情况 (0类似于插完恰好单只3节点);
		//通过记录3各种最底下那个的_bf可以给出3种情况以变正确修正;
		Node* pR = parent->_right;
		Node* pRL = pR->_left;
		
		int bf = pRL->_bf;// 1 -1 or 0
		RotateR(pR);
		RotateL(parent);
		
		
		pRL->_bf = 0;
		//(0类似于插完恰好单只3节点);
		if (bf == 0)
			pR->_bf = parent -> _bf = 0;
		//一开始插得在其右边！给到pR左补上了
		else if (bf == 1)
		{
			pR->_bf = 0;
			parent->_bf = -1;
		} 
		//bf==-1 一开始插得在其右边！给到parent左补上了
		else
		{
			pR->_bf = 1;
			parent->_bf = 0;
		}

	}
	// 左右双旋
	void RotateLR(Node* parent)
	{
		Node* pL = parent->_left;
		Node* pLR = pL->_right;
		int bf = pLR->_bf;// 1 -1 or 0
		RotateL(pL);
		RotateR(parent);
		//(0类似于插完恰好单只3节点);
		if (bf == 0)
			pL->_bf = parent->_bf = 0;
		//一开始插得在其右边！给到pR左补上了
		else if (bf == 1)
		{
			pL->_bf = -1;
			parent->_bf = 0;
		}
		//bf==-1 一开始插得在其右边！给到parent左补上了
		else
		{
			pL->_bf = 0;
			parent->_bf = 1;
		}

	}
	void _InOrder(Node* pRoot)
	{
		if (pRoot)
		{
			_InOrder(pRoot->_left);
			cout << pRoot->_data << " ";
			_InOrder(pRoot->_right);
		}
	}
private:
	Node* _root;
};



int main()
{
	AVLTree<int>tree;
	vector<int>list = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };
	for (auto& e : list)
	{
		tree.Insert(e);
	}


	cout<<tree.IsAVLTree()<<endl;
	tree.Inorder();
	
	
	return 0;
}
